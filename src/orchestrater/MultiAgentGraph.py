"""
agent_graph.py

This module defines the multi-agent graph for the generative AI project.
It coordinates different agent nodes using a supervisor to route the conversation flow.
"""

import os
import re
import uuid
import pandas as pd
import numpy as np
import functools
import warnings
from dotenv import load_dotenv, find_dotenv
from typing import TypedDict, Annotated, List, Dict, Optional, Union
from dataclasses import dataclass
from pathlib import Path
from io import BytesIO
import streamlit as st
from langgraph.graph import StateGraph, END
from langgraph.graph.message import add_messages
from langchain_core.messages import AnyMessage, SystemMessage, HumanMessage, ToolMessage, AIMessage
import aiosqlite
from langgraph.checkpoint.sqlite.aio import AsyncSqliteSaver
from langgraph.checkpoint.mongodb.aio import AsyncMongoDBSaver
from src.utils.data_processing import process_shipment_data_for_consolidation
from src.agents.supervisor import get_supervisor_chain
from src.agents.CostOptimization_Node import AgenticCostOptimizer
from src.agents.Static_CostOptimization_Node import get_static_savings
from src.core.order_consolidation.dynamic_consolidation import get_parameters_values
from src.agents.insights_agent.insights_complete import extract_insight_llm_response,execute_codes
from src.agents.PalletUtilisationOptimization_Node import PalletUtilisation_parameter_extraction_chain
from src.agents.PalletUtilisationOptimization_Node import PalletUtilisationOptimisationAgent
from src.agents.DropPointCentralizationOptimization_Node import DropPointCentralization_parameter_extraction_chain
from src.agents.DropPointCentralizationOptimization_Node import DropPointCentralizationOptimizationAgent
from src.utils.consolidation_ui import create_shipment_window_vs_saving_plot
from src.utils.plot_heatmaps import plot_dual_calendar_heatmaps,plot_dual_calendar_heatmaps_filtered

warnings.filterwarnings("ignore")

# Load environment variables
_ = load_dotenv(find_dotenv())

@dataclass
class AgentVisualizationOutput:
    """Represents a visual output (plot, chart, etc.) generated by an agent"""
    path: str
    type: str
    figure : None# 'matplotlib', 'plotly', 'bokeh', 'pyecharts'
    title: Optional[str] = None
    description: Optional[str] = None
    metadata: Optional[Dict] = None

class AgentConversationState(TypedDict):
    """Enhanced state that includes visual outputs and conversation tracking"""
    messages: Annotated[list[AnyMessage], add_messages]
    next: str
    visual_outputs: list# List of visual outputs generated during the conversation
    current_agent: str  # Name of the current agent
    metadata: Dict  # Additional metadata about the current state
    parameters: Optional[Dict]
    intermediate_result: Dict
    reasoning_task: str
    sku_analysis: str

def process_supervisor_node(state: AgentConversationState,shipment_df):
    """Process the supervisor node to determine the next agent and handle responses."""
    supervisor_chain,members = get_supervisor_chain()
    result = supervisor_chain.invoke(state['messages'])
    print(f"Result supervisor : {result}")
    
    # Extract parameters if not already present and if routing to an agent that needs them
    if result['next'] in ['Dynamic Cost Optimization Agent', 'Static Cost Optimization Agent', 'Insights Agent','Pallet Utilization Optimization Agent','Drop Point Centralization Optimization Agent']:
        question = result['enriched_question']
        parameters = {}
        print(f"Question for Extracting parameters:\n{question}")
        if result['next'] in ['Dynamic Cost Optimization Agent', 'Static Cost Optimization Agent']:
            insights_df_processed = process_shipment_data_for_consolidation(shipment_df)
            parameters = get_parameters_values(question, insights_df_processed,attempt=0)
            print("Parameters extracted based on enriched query:\n")
            for k,v in parameters.items():
                print(k,v,sep=" : ")
        if result['next'] in ['Pallet Utilization Optimization Agent']:
            
            extract_params_chain = PalletUtilisation_parameter_extraction_chain()
            parameters = extract_params_chain.invoke(question)
            print("Parameters extracted based on enriched query:\n")
            for k,v in parameters.items():
                print(k,v,sep=" : ")

        if result['next'] in ['Drop Point Centralization Optimization Agent']:
            
            extract_params_chain = DropPointCentralization_parameter_extraction_chain()
            parameters = extract_params_chain.invoke(question)
            print("Parameters extracted based on enriched query:\n")
            for k,v in parameters.items():
                print(k,v,sep=" : ")


        print("-"*40)
        parameters['enriched_query'] = question
        state['parameters'] = parameters
        state["reasoning_task"] = result["reasoning_task"]
        state["sku_analysis"] = result["sku_analysis"]
    
    if result['next'] == 'SELF_RESPONSE':
        if 'direct_response' in result:
            
            return_response = result.get('direct_response','thought_process')
            return_response = return_response if return_response!='' else result.get('thought_process','')
            return {
                "messages": [AIMessage(content=return_response,name="supervisor")], 
                "next": "FINISH",
                "parameters": state.get('parameters')
            }
        return {
            "messages": [AIMessage(content="I understand your question. Let me answer directly.",name="supervisor")], 
            "next": "FINISH",
            "parameters": state.get('parameters')
        }
    
    return_response = result.get('direct_response',result.get('thought_process',f"Calling {result['next']}..."))
    return_response = return_response if return_response!='' else result.get('thought_process',f"Calling {result['next']}...")
    
    return {
        "messages": [AIMessage(content=return_response,name="supervisor")], 
        "next": result['next'],
        "parameters": state.get('parameters'),
        "reasoning_task": result["reasoning_task"],
        "sku_analysis": result["sku_analysis"]
    }

def process_agent_node(state, agent, name, llm, shipment_df=None, rate_card=None,azure_client=None):
    """Process a generic agent node with the given state and parameters."""
    result = agent(state, llm, shipment_df, rate_card,azure_client)
    return {"messages": result, "next": "supervisor",}


def process_bi_agent(state: AgentConversationState, llm, shipment_df, rate_card,azure_client):
    """Process the Business Intelligence agent to analyze data and generate insights."""
    insight_df,sku_master = shipment_df
    try:
        # if state['sku_analysis'] == 'False':
        question = state['parameters']['enriched_query']
        question = re.sub(r'\bcustomers? location(s)?\b', 'ship to location', question, flags=re.IGNORECASE)
        print(f"Question in Insight agent : {question}")
        is_sku_analysis = state['sku_analysis']
        response = extract_insight_llm_response(llm,question,is_sku_analysis)
        final_results = execute_codes(llm,question,insight_df,sku_master, response.content,is_sku_analysis)
        result_df = final_results['result_df']
        if state['reasoning_task'] == 'False' and result_df.shape != (1,2) and result_df.shape != (1,1):
            if final_results['figure'] is not None:
                fig = final_results['figure']
                st.session_state.image.append(fig)
                filename = f"./plots/{uuid.uuid4().hex}.png"
                # final_results['figure'].savefig(filename)
                final_results['figure'].write_image(filename)
                insights_img_filename = f"plotly-chart-{uuid.uuid4().hex}.png"
                insights_image_bytes = BytesIO()
                # Save to buffer
                final_results['figure'].write_image(insights_image_bytes, format="png")
                insights_image_bytes.seek(0)
                insights_image_url = azure_client.upload_image_to_blob(insights_image_bytes, insights_img_filename, "image/png")
                state['visual_outputs'].append(insights_image_url)
            state['current_agent'] = 'Insights Agent'
            state['intermediate_result'] = {
                "python_code": final_results['code'],
                "insight_result": final_results['answer'],
            }
            # state['visual_outputs'].append(filename)
        summary = final_results['answer']
        print("Insights Agent Result", summary)
    except Exception as e:
        print("Error in Insights Agent", e)
        summary = "Unable to extract answer for given query due to limitations in bot capabilities or ambiguity in the question. Please try rephrasing your question or providing more context."
    return [AIMessage(content=summary,name="InsightsAgent")]
    # return answer

# ---------------------- Dynamic Cost Optimization Agent ----------------------

def Dynamic_CostOptimization_Agent(state: AgentConversationState,llm,shipment_df,rate_card,azure_client):
    """Process the Dynamic Cost Optimization agent."""
    try:
        file_path = os.path.join("src", "data", "Complete Input.xlsx")
        df = process_shipment_data_for_consolidation(shipment_df)
        agent_parameters = {
            "api_key": os.getenv("OPENAI_API_KEY"),
            "query": state["parameters"]["enriched_query"],
            "file_name": file_path,
            "df": df
        }
        agent_instance = AgenticCostOptimizer(llm, agent_parameters)
        response_parameters = agent_instance.handle_query(state["parameters"])
        
        
        shipment_window_image = create_shipment_window_vs_saving_plot(response_parameters["all_results"], response_parameters["best_params"])
        st.session_state.image.append(shipment_window_image)
        shipment_win_filename = f"plotly-chart-{uuid.uuid4().hex}.png"
        shipment_win_image_bytes = BytesIO()
        # Save to buffer
        shipment_window_image.write_image(shipment_win_image_bytes, format="png")
        shipment_win_image_bytes.seek(0)
        shipment_win_url = azure_client.upload_image_to_blob(shipment_win_image_bytes, shipment_win_filename, "image/png")
        # shipment_window_image.write_image(shipment_win_filename)
        state['visual_outputs'].append(shipment_win_url)
        consolidated_df = response_parameters['all_consolidated_shipments']
        original_df = response_parameters['filtered_df']
        original_df['Date']=original_df['SHIPPED_DATE']


        heatmap_filename = f"matplotlib-chart-{uuid.uuid4().hex}.png"
        heatmap_image_bytes, fig = plot_dual_calendar_heatmaps(original_df, consolidated_df,save_path=heatmap_filename)

        st.session_state.image.append(fig)
        # heatmap_image_bytes = plot_dual_calendar_heatmaps_filtered(original_df,consolidated_df,state['parameters']['start_date'],state['parameters']['end_date'],save_path=heatmap_filename)
        heatmap_url = azure_client.upload_image_to_blob(heatmap_image_bytes, heatmap_filename, "image/png")
        state['visual_outputs'].append(heatmap_url)

        state['current_agent'] = 'Dynamic Order Consolidation Agent'
        state['intermediate_result'] = {"consolidated_df": consolidated_df}
        consolidation_response = {
            'query': state["parameters"]["enriched_query"],
            'answer': response_parameters['final_response'].content if hasattr(response_parameters['final_response'], 'content') else response_parameters['final_response'],
            'timestamp': pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        message = consolidation_response['answer']
    except Exception as e:
        print(">>>Error in Dynamic Cost Optimization Agent", e)
        message = "Unable to extract answer for given query due to limitations in bot capabilities or ambiguity in the question. Please try rephrasing your question or providing more context."
    return [AIMessage(content=message,name="DynamicCostOptimizationAgent")]

# ---------------------- Static Cost Optimization Agent ----------------------

def Static_CostOptimization_agent(state: AgentConversationState,llm,shipment_df,rate_card,azure_client):
    """Process the Static Cost Optimization agent."""
    try:
        print("Static Cost Optimization Agent called")
        question = state["parameters"]["enriched_query"]

        df = process_shipment_data_for_consolidation(shipment_df)
        
        response_parameters = get_static_savings(llm,question,df,rate_card,state["parameters"])

        # Creating heatmap 
        consolidated_df = response_parameters['consolidated_data']
        consolidated_df['Date']=consolidated_df['UPDATED_DATE']
        original_df = response_parameters['aggregated_data']
        original_df['Date']=original_df['SHIPPED_DATE']
        heatmap_filename = f"matplotlib-chart-{uuid.uuid4().hex}.png"
        image_bytes, fig = plot_dual_calendar_heatmaps(original_df, consolidated_df,save_path=heatmap_filename)
        # image_bytes = plot_dual_calendar_heatmaps_filtered(original_df, consolidated_df,state['parameters']['start_date'],state['parameters']['end_date'],save_path=heatmap_filename)
        st.session_state.image.append(fig)
        url = azure_client.upload_image_to_blob(image_bytes, heatmap_filename, "image/png")
        
        state['visual_outputs'].append(url)
        state['current_agent'] = 'Static Order Consolidation Agent'

        consolidation_response = {
            'query': question,
            'answer': response_parameters['final_response'].content if hasattr(response_parameters['final_response'], 'content') else response_parameters['final_response'],
            'timestamp': pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        message = consolidation_response['answer']
        print("Static Cost Optimization Agent Result", message)
    except Exception as e:
        print(">>>Error in Static Cost Optimization Agent", e)
        message = "Unable to extract answer for given query due to limitations in bot capabilities or ambiguity in the question. Please try rephrasing your question or providing more context."
    return [AIMessage(content=message,name="StaticCostOptimizationAgent")]

# ---------------------- Pallet Utilization ----------------------
def pallet_utilisation_optimisation_agent(state: AgentConversationState,llm,shipment_df,rate_card,azure_client):

    try:
        print("Pallet Utilization Optimization Agent called")
        question = state["parameters"]["enriched_query"]

        pallet_agent = PalletUtilisationOptimisationAgent(state["parameters"])
        agent_response = pallet_agent.generate_results(llm,shipment_df,question)
        print("Pallet Utilization Optimization Agent generated response")

        for fig in agent_response['fig']:
            filename = f"plotly-chart-{uuid.uuid4().hex}.png"
            image_bytes = BytesIO()
            fig.write_image(image_bytes, format="png")
            image_bytes.seek(0)
            image_url = azure_client.upload_image_to_blob(image_bytes, filename, "image/png")
            state['visual_outputs'].append(image_url)
            st.session_state.image.append(fig)

        message = f"""This is the response from the agent: {agent_response['final_response'].content if hasattr(agent_response['final_response'], 'content') else agent_response['final_response']}"""

        # state['visual_outputs'].append(filename)
    except Exception as e:
        print(">>>Error in Pallet Utilization Optimization Agent", e)
        message = "Unable to extract answer for given query due to limitations in bot capabilities or ambiguity in the question. Please try rephrasing your question or providing more context."
    return [AIMessage(content=message,name="PalletUtilisationOptimizationAgent")]


# ---------------------- Pallet Utilization ----------------------
def drop_point_centralization_optimisation_agent(state: AgentConversationState,llm,shipment_df,rate_card,azure_client):
    try:
        print("Drop Point Centralization Optimization Agent called")
        question = state["parameters"]["enriched_query"]

        df = shipment_df # Alreadty Present
        file_path = os.path.join("src", "data", "Rate_Card.xlsx")

        amb_rc = pd.read_excel(file_path, sheet_name="AMB") # Need to add
        ambc_rc = pd.read_excel(file_path, sheet_name="AMB_C") # Need to add
        
        optimizer = DropPointCentralizationOptimizationAgent(df, amb_rc, ambc_rc, state["parameters"])
        agent_response = optimizer.generate_results(llm,state["parameters"],question)
        print("Drop Point Centralization Optimization Agent generated response")

        for fig in agent_response['fig']:
            filename = f"plotly-chart-{uuid.uuid4().hex}.png"
            image_bytes = BytesIO()
            fig.write_image(image_bytes, format="png")
            image_bytes.seek(0)
            image_url = azure_client.upload_image_to_blob(image_bytes, filename, "image/png")
            state['visual_outputs'].append(image_url)
            st.session_state.image.append(fig)

        message = f"""This is the response from the agent: {agent_response['final_response'].content if hasattr(agent_response['final_response'], 'content') else agent_response['final_response']}"""

    except Exception as e:
        print(">>>Error in Pallet Utilization Optimization Agent", e)
        message = "Unable to extract answer for given query due to limitations in bot capabilities or ambiguity in the question. Please try rephrasing your question or providing more context."

    return [AIMessage(content=message,name="DropPointCentralizationOptimizationAgent")]



def create_agent_graph(llm, shipment_df, rate_card,insights_df,SKU_master,azure_client):
    """Create and return the multi-agent graph with async support."""

    supervisor_chain, members = get_supervisor_chain()
    
    bi_agent_node = functools.partial(process_agent_node, agent=process_bi_agent, name="Insights Agent", llm=llm, shipment_df=(insights_df,SKU_master), rate_card=rate_card, azure_client=azure_client)
    dynamic_cost_optimization_node = functools.partial(process_agent_node, agent=Dynamic_CostOptimization_Agent, name="Dynamic Cost Optimization Agent", llm=llm,shipment_df=insights_df,rate_card=rate_card,azure_client=azure_client)
    static_cost_optimization_node = functools.partial(process_agent_node, agent=Static_CostOptimization_agent, name="Static Cost Optimization Agent", llm=llm, shipment_df=insights_df,rate_card=rate_card, azure_client=azure_client)
    pallet_utilisation_optimisation_agent_node = functools.partial(process_agent_node, agent=pallet_utilisation_optimisation_agent,name="Pallet Utilization Optimization Agent",llm=llm, shipment_df=SKU_master, rate_card=rate_card, azure_client=azure_client)
    drop_point_centralization_optimisation_agent_node = functools.partial(process_agent_node, agent=drop_point_centralization_optimisation_agent,name="Drop Point Centralization Optimization Agent",llm=llm, shipment_df=insights_df, rate_card=rate_card, azure_client=azure_client)
    supervisor_node = functools.partial(process_supervisor_node,shipment_df=insights_df)
    workflow = StateGraph(AgentConversationState)

    workflow.add_node("Insights Agent", bi_agent_node)
    workflow.add_node("Dynamic Cost Optimization Agent", dynamic_cost_optimization_node)
    workflow.add_node("Static Cost Optimization Agent", static_cost_optimization_node)
    workflow.add_node("Pallet Utilization Optimization Agent", pallet_utilisation_optimisation_agent_node)
    workflow.add_node("Drop Point Centralization Optimization Agent", drop_point_centralization_optimisation_agent_node)
    workflow.add_node("supervisor", supervisor_node)

    for member in members:
        if member['agent_name'] != "SELF_RESPONSE":
            workflow.add_edge(member['agent_name'], "supervisor")

    conditional_map = {k['agent_name']: k['agent_name'] for k in members if k['agent_name'] != "SELF_RESPONSE"}
    conditional_map["FINISH"] = END
    workflow.add_conditional_edges("supervisor", lambda x: x["next"], conditional_map)
    workflow.set_entry_point("supervisor")
    # graph = workflow.compile(checkpointer=checkpointer)
    # return graph
    return workflow